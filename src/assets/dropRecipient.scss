@use '@/assets/core/animation/variables' as animation;
@use '@/assets/core/color/variables' as color;
@use '@/assets/core/decorative/variables' as decorative;
@use '@/assets/core/spacing/variables' as spacing;

@property --gradientColor1 {
  syntax: '<color>';
  initial-value: transparent;
  inherits: false;
}

@property --gradientColor2 {
  syntax: '<color>';
  initial-value: transparent;
  inherits: false;
}

@property --guidanceBackgroundColor {
  syntax: '<color>';
  initial-value: transparent;
  inherits: false;
}

@property --guidanceTextColor {
  syntax: '<color>';
  initial-value: transparent;
  inherits: false;
}

@mixin drop-recipient {
  & {
    position: relative;
  }

  $arrowHeight: var(--spacing-margin-standard);

  .guidance-tooltip {
    position: absolute;
    pointer-events: none;
    user-select: none;
    border-radius: decorative.$border-radius;
    opacity: 0;
    transform: translateX(-5px) translateY(5px);
    transition: opacity animation.$transition-time-standard, transform animation.$transition-time-standard;
    background-color: rgba(color.$white, 0.1);

    &.below {
      top: 100%;
      margin-top: var(--spacing-margin-half);
      padding-top: $arrowHeight;

      &::before {
        top: calc($arrowHeight * -1);
        border-color: transparent transparent #{rgba(color.$text, 0.8)} transparent;
      }

      .content {
        border-radius: 0 0 decorative.$border-radius decorative.$border-radius;
      }
    }

    &.above {
      bottom: 100%;
      margin-bottom: var(--spacing-margin-half);
      padding-bottom: $arrowHeight;

      &::before {
        bottom: calc($arrowHeight * -1);
        border-top-color: #{rgba(color.$text, 0.8)};
      }

      .content {
        border-radius: decorative.$border-radius decorative.$border-radius 0 0;
      }
    }

    &.leftwards {
      right: 0;

      &::before {
        right: var(--spacing-margin-standard);
      }
    }

    &.rightwards {
      left: 0;

      &::before {
        left: var(--spacing-margin-standard);
      }
    }

    &::before {
      content: '';
      position: absolute;
      border-color: transparent;
      border-style: solid;
      border-width: var(--spacing-margin-standard);
    }

    .content {
      background-color: #{rgba(color.$secondary, 0.8)};
      color: #{color.$text};
      padding: var(--spacing-padding-half) var(--spacing-padding-standard);
      font-size: var(--typography-font-size-small);
      white-space: nowrap;
    }
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid decorative.$border-width-thick transparent;
    border-radius: decorative.$border-radius;
    background: linear-gradient(
                    45deg,
                    var(--gradientColor1) 15%,
                    var(--gradientColor2) 15%,
                    var(--gradientColor2) 50%,
                    var(--gradientColor1) 50%,
                    var(--gradientColor1) 65%,
                    var(--gradientColor2) 65%,
                    var(--gradientColor2) 100%
    );
    background-size: 5px 5px;
    transition: border-color animation.$transition-time-slower, --gradientColor1 animation.$transition-time-slower, --gradientColor2 animation.$transition-time-slower;
    pointer-events: none;
    z-index: 1;
  }

  &.invites-drop,
  &.accepts-drop {
    .guidance-tooltip {
      opacity: 1;
      z-index: 2;
    }
  }

  &.invites-drop {
    &::before {
      border-color: rgba(color.$secondary, 0.4);
      --gradientColor1: #{rgba(color.$accent, 0.25)};
      --gradientColor2: #{rgba(color.$secondary, 0.25)};
    }
  }

  &.accepts-drop {
    &::before {
      border-color: rgba(color.$accent, 0.4);
      --gradientColor1: #{rgba(color.$secondary, 0.25)};
      --gradientColor2: #{rgba(color.$accent, 0.25)};
    }
  }
}
